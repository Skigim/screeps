{"version":3,"file":"main.js","sources":["../src/magistrates/LegatusArchivus.ts","../src/interfaces/TaskType.ts","../src/magistrates/LegatusOfficio.ts","../src/magistrates/LegatusGenetor.ts","../src/magistrates/LegatusFabrum.ts","../src/magistrates/LegatusViae.ts","../src/principate/Empire.ts","../src/main.ts"],"sourcesContent":["/// <reference types=\"screeps\" />\r\n\r\nimport {\r\n  ArchivistReport,\r\n  SourceReport,\r\n  SpawnReport,\r\n  TowerReport,\r\n  ContainerReport,\r\n  ConstructionSiteReport,\r\n  RepairTargetReport,\r\n  ControllerReport,\r\n  HostileReport\r\n} from '../interfaces';\r\n\r\n/**\r\n * Legatus Archivus - The Archivist\r\n * \r\n * Responsibility: Observe and report on room state\r\n * Philosophy: No decisions, no opinions - only data\r\n * \r\n * The Archivist is the eyes and ears of the Magistrates.\r\n * It produces a clean, structured report that other modules consume.\r\n */\r\nexport class LegatusArchivus {\r\n  constructor(readonly roomName: string) {}\r\n\r\n  /**\r\n   * Generate a comprehensive report on the room's current state\r\n   */\r\n  public run(room: Room): ArchivistReport {\r\n    return {\r\n      roomName: room.name,\r\n      rcl: room.controller?.level || 0,\r\n      \r\n      energyAvailable: room.energyAvailable,\r\n      energyCapacityAvailable: room.energyCapacityAvailable,\r\n      energyDeficit: room.energyCapacityAvailable - room.energyAvailable,\r\n      \r\n      sources: this.analyzeSources(room),\r\n      spawns: this.analyzeSpawns(room),\r\n      extensions: room.find(FIND_MY_STRUCTURES, {\r\n        filter: (s) => s.structureType === STRUCTURE_EXTENSION\r\n      }).length,\r\n      towers: this.analyzeTowers(room),\r\n      containers: this.analyzeContainers(room),\r\n      storageAvailable: room.storage !== undefined,\r\n      storageEnergy: room.storage?.store[RESOURCE_ENERGY] || 0,\r\n      \r\n      constructionSites: this.analyzeConstructionSites(room),\r\n      repairTargets: this.analyzeRepairTargets(room),\r\n      \r\n      controller: this.analyzeController(room),\r\n      \r\n      hostiles: this.analyzeHostiles(room),\r\n      hostileThreatLevel: this.calculateThreatLevel(room),\r\n      \r\n      creepsByRole: this.countCreepsByRole(room),\r\n      totalCreeps: this.countTotalCreeps(room),\r\n      \r\n      highTrafficPositions: [] // TODO: Implement traffic analysis\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Analyze all energy sources in the room\r\n   */\r\n  private analyzeSources(room: Room): SourceReport[] {\r\n    const sources = room.find(FIND_SOURCES);\r\n    return sources.map(source => {\r\n      const harvesters = room.find(FIND_MY_CREEPS, {\r\n        filter: (c) => c.memory.role === 'harvester' && \r\n                       c.memory.targetId === source.id\r\n      });\r\n      \r\n      return {\r\n        id: source.id,\r\n        pos: { x: source.pos.x, y: source.pos.y },\r\n        energy: source.energy,\r\n        energyCapacity: source.energyCapacity,\r\n        harvestersPresent: harvesters.length,\r\n        harvestersNeeded: 2 // Simple default - can be improved\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Analyze all spawn structures in the room\r\n   */\r\n  private analyzeSpawns(room: Room): SpawnReport[] {\r\n    const spawns = room.find(FIND_MY_SPAWNS);\r\n    return spawns.map(spawn => ({\r\n      id: spawn.id,\r\n      spawning: spawn.spawning !== null,\r\n      energy: spawn.store[RESOURCE_ENERGY],\r\n      energyCapacity: spawn.store.getCapacity(RESOURCE_ENERGY)\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Analyze all tower structures in the room\r\n   */\r\n  private analyzeTowers(room: Room): TowerReport[] {\r\n    const towers = room.find(FIND_MY_STRUCTURES, {\r\n      filter: (s) => s.structureType === STRUCTURE_TOWER\r\n    }) as StructureTower[];\r\n    \r\n    return towers.map(tower => ({\r\n      id: tower.id,\r\n      energy: tower.store[RESOURCE_ENERGY],\r\n      energyCapacity: tower.store.getCapacity(RESOURCE_ENERGY),\r\n      needsRefill: tower.store[RESOURCE_ENERGY] < tower.store.getCapacity(RESOURCE_ENERGY) * 0.5\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Analyze all container structures in the room\r\n   */\r\n  private analyzeContainers(room: Room): ContainerReport[] {\r\n    const containers = room.find(FIND_STRUCTURES, {\r\n      filter: (s) => s.structureType === STRUCTURE_CONTAINER\r\n    }) as StructureContainer[];\r\n    \r\n    return containers.map(container => ({\r\n      id: container.id,\r\n      pos: { x: container.pos.x, y: container.pos.y },\r\n      store: { energy: container.store[RESOURCE_ENERGY] },\r\n      storeCapacity: container.store.getCapacity(RESOURCE_ENERGY)\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Analyze all construction sites in the room\r\n   */\r\n  private analyzeConstructionSites(room: Room): ConstructionSiteReport[] {\r\n    const sites = room.find(FIND_MY_CONSTRUCTION_SITES);\r\n    return sites.map(site => ({\r\n      id: site.id,\r\n      structureType: site.structureType,\r\n      progress: site.progress,\r\n      progressTotal: site.progressTotal,\r\n      pos: { x: site.pos.x, y: site.pos.y }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Analyze all structures that need repair\r\n   */\r\n  private analyzeRepairTargets(room: Room): RepairTargetReport[] {\r\n    const structures = room.find(FIND_STRUCTURES, {\r\n      filter: (s) => s.hits < s.hitsMax && s.structureType !== STRUCTURE_WALL\r\n    });\r\n    \r\n    return structures.map(structure => ({\r\n      id: structure.id,\r\n      structureType: structure.structureType,\r\n      hits: structure.hits,\r\n      hitsMax: structure.hitsMax,\r\n      priority: this.calculateRepairPriority(structure),\r\n      pos: { x: structure.pos.x, y: structure.pos.y }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Calculate repair priority for a structure based on type and condition\r\n   */\r\n  private calculateRepairPriority(structure: Structure): number {\r\n    const hitPercent = structure.hits / structure.hitsMax;\r\n    \r\n    // Critical structures get higher priority\r\n    const criticalStructures: StructureConstant[] = [\r\n      STRUCTURE_SPAWN,\r\n      STRUCTURE_TOWER,\r\n      STRUCTURE_STORAGE,\r\n      STRUCTURE_TERMINAL\r\n    ];\r\n    \r\n    if ((criticalStructures as StructureConstant[]).includes(structure.structureType)) {\r\n      return hitPercent < 0.5 ? 90 : 70;\r\n    }\r\n    \r\n    return hitPercent < 0.3 ? 50 : 30;\r\n  }\r\n\r\n  /**\r\n   * Analyze the room controller status\r\n   */\r\n  private analyzeController(room: Room): ControllerReport {\r\n    const controller = room.controller!;\r\n    return {\r\n      id: controller.id,\r\n      level: controller.level,\r\n      progress: controller.progress,\r\n      progressTotal: controller.progressTotal,\r\n      ticksToDowngrade: controller.ticksToDowngrade || 0,\r\n      upgraderCount: this.countUpgraders(room),\r\n      upgraderRecommendation: this.recommendUpgraders(controller)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Count how many upgrader creeps are currently active\r\n   */\r\n  private countUpgraders(room: Room): number {\r\n    return room.find(FIND_MY_CREEPS, {\r\n      filter: (c) => c.memory.role === 'upgrader'\r\n    }).length;\r\n  }\r\n\r\n  /**\r\n   * Recommend optimal number of upgraders based on controller level\r\n   */\r\n  private recommendUpgraders(controller: StructureController): number {\r\n    // Simple logic: more upgraders for higher RCL\r\n    if (controller.level < 3) return 1;\r\n    if (controller.level < 5) return 2;\r\n    return 3;\r\n  }\r\n\r\n  /**\r\n   * Analyze all hostile creeps in the room\r\n   */\r\n  private analyzeHostiles(room: Room): HostileReport[] {\r\n    const hostiles = room.find(FIND_HOSTILE_CREEPS);\r\n    return hostiles.map(hostile => ({\r\n      id: hostile.id,\r\n      pos: { x: hostile.pos.x, y: hostile.pos.y },\r\n      owner: hostile.owner.username,\r\n      body: hostile.body.map(part => part.type),\r\n      threatLevel: this.calculateCreepThreat(hostile)\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Calculate threat level of a creep based on body composition\r\n   */\r\n  private calculateCreepThreat(creep: Creep): number {\r\n    let threat = 0;\r\n    creep.body.forEach(part => {\r\n      if (part.type === ATTACK) threat += 3;\r\n      if (part.type === RANGED_ATTACK) threat += 2;\r\n      if (part.type === HEAL) threat += 2;\r\n      if (part.type === TOUGH) threat += 1;\r\n    });\r\n    return threat;\r\n  }\r\n\r\n  /**\r\n   * Calculate overall threat level for the room (0-10 scale)\r\n   */\r\n  private calculateThreatLevel(room: Room): number {\r\n    const hostiles = room.find(FIND_HOSTILE_CREEPS);\r\n    if (hostiles.length === 0) return 0;\r\n    \r\n    const totalThreat = hostiles.reduce((sum, h) => sum + this.calculateCreepThreat(h), 0);\r\n    return Math.min(10, Math.ceil(totalThreat / 5));\r\n  }\r\n\r\n  /**\r\n   * Count creeps by role\r\n   */\r\n  private countCreepsByRole(room: Room): Map<string, number> {\r\n    const creeps = room.find(FIND_MY_CREEPS);\r\n    const counts = new Map<string, number>();\r\n    \r\n    creeps.forEach(creep => {\r\n      const role = creep.memory.role || 'unknown';\r\n      counts.set(role, (counts.get(role) || 0) + 1);\r\n    });\r\n    \r\n    return counts;\r\n  }\r\n\r\n  /**\r\n   * Count total creeps in the room\r\n   */\r\n  private countTotalCreeps(room: Room): number {\r\n    return room.find(FIND_MY_CREEPS).length;\r\n  }\r\n}\r\n","/**\r\n * All possible task types in the Empire\r\n * These represent the fundamental actions a creep can be assigned\r\n */\r\nexport enum TaskType {\r\n  // Energy Management\r\n  HARVEST_ENERGY = 'HARVEST_ENERGY',\r\n  HAUL_ENERGY = 'HAUL_ENERGY',\r\n  WITHDRAW_ENERGY = 'WITHDRAW_ENERGY',\r\n  \r\n  // Construction & Repair\r\n  BUILD = 'BUILD',\r\n  REPAIR = 'REPAIR',\r\n  \r\n  // Controller Operations\r\n  UPGRADE_CONTROLLER = 'UPGRADE_CONTROLLER',\r\n  \r\n  // Defense\r\n  DEFEND_ROOM = 'DEFEND_ROOM',\r\n  TOWER_DEFENSE = 'TOWER_DEFENSE',\r\n  \r\n  // Logistics\r\n  REFILL_SPAWN = 'REFILL_SPAWN',\r\n  REFILL_EXTENSION = 'REFILL_EXTENSION',\r\n  REFILL_TOWER = 'REFILL_TOWER',\r\n  \r\n  // Special Operations\r\n  CLAIM_CONTROLLER = 'CLAIM_CONTROLLER',\r\n  RESERVE_CONTROLLER = 'RESERVE_CONTROLLER',\r\n  SCOUT_ROOM = 'SCOUT_ROOM',\r\n  \r\n  // Idle/Default\r\n  IDLE = 'IDLE'\r\n}\r\n","import { ArchivistReport, Task, TaskType } from '../interfaces';\r\n\r\n/**\r\n * Legatus Officio - The Taskmaster\r\n * \r\n * Responsibility: Transform observations into actionable tasks\r\n * Philosophy: Every problem is a task waiting to be solved\r\n * \r\n * The Taskmaster reads the Archivist's report and creates a prioritized\r\n * work queue. It doesn't care WHO does the work - just WHAT needs doing.\r\n */\r\nexport class LegatusOfficio {\r\n  private roomName: string;\r\n  private taskIdCounter: number = 0;\r\n\r\n  constructor(roomName: string) {\r\n    this.roomName = roomName;\r\n  }\r\n\r\n  /**\r\n   * Analyze the room report and generate prioritized tasks\r\n   */\r\n  public run(report: ArchivistReport): Task[] {\r\n    const tasks: Task[] = [];\r\n\r\n    // Priority 1: Emergency Defense\r\n    if (report.hostileThreatLevel > 0) {\r\n      tasks.push(...this.createDefenseTasks(report));\r\n    }\r\n\r\n    // Priority 2: Spawn Energy (can't do anything without energy)\r\n    if (report.energyDeficit > 0) {\r\n      tasks.push(...this.createEnergyTasks(report));\r\n    }\r\n\r\n    // Priority 3: Tower Maintenance\r\n    if (report.towers.some(t => t.needsRefill)) {\r\n      tasks.push(...this.createTowerRefillTasks(report));\r\n    }\r\n\r\n    // Priority 4: Construction\r\n    if (report.constructionSites.length > 0) {\r\n      tasks.push(...this.createConstructionTasks(report));\r\n    }\r\n\r\n    // Priority 5: Critical Repairs\r\n    const criticalRepairs = report.repairTargets.filter(r => r.priority > 70);\r\n    if (criticalRepairs.length > 0) {\r\n      tasks.push(...this.createRepairTasks(criticalRepairs));\r\n    }\r\n\r\n    // Priority 6: Controller Upgrade\r\n    tasks.push(...this.createUpgradeTasks(report));\r\n\r\n    // Priority 7: Non-Critical Repairs\r\n    const minorRepairs = report.repairTargets.filter(r => r.priority <= 70);\r\n    if (minorRepairs.length > 0) {\r\n      tasks.push(...this.createRepairTasks(minorRepairs));\r\n    }\r\n\r\n    // Sort by priority (highest first)\r\n    return tasks.sort((a, b) => b.priority - a.priority);\r\n  }\r\n\r\n  private createDefenseTasks(report: ArchivistReport): Task[] {\r\n    const tasks: Task[] = [];\r\n    \r\n    report.hostiles.forEach(hostile => {\r\n      tasks.push({\r\n        id: this.generateTaskId(),\r\n        type: TaskType.DEFEND_ROOM,\r\n        priority: 95 + report.hostileThreatLevel,\r\n        targetId: hostile.id,\r\n        targetPos: { x: hostile.pos.x, y: hostile.pos.y, roomName: this.roomName },\r\n        creepsNeeded: Math.ceil(hostile.threatLevel / 10),\r\n        assignedCreeps: []\r\n      });\r\n    });\r\n\r\n    return tasks;\r\n  }\r\n\r\n  private createEnergyTasks(report: ArchivistReport): Task[] {\r\n    const tasks: Task[] = [];\r\n\r\n    // Harvest from sources\r\n    report.sources.forEach(source => {\r\n      if (source.energy > 0 && source.harvestersPresent < source.harvestersNeeded) {\r\n        tasks.push({\r\n          id: this.generateTaskId(),\r\n          type: TaskType.HARVEST_ENERGY,\r\n          priority: 85,\r\n          targetId: source.id,\r\n          targetPos: { x: source.pos.x, y: source.pos.y, roomName: this.roomName },\r\n          creepsNeeded: source.harvestersNeeded - source.harvestersPresent,\r\n          assignedCreeps: []\r\n        });\r\n      }\r\n    });\r\n\r\n    // Haul energy from containers to spawns/extensions\r\n    report.containers.forEach(container => {\r\n      if (container.store.energy > 100 && report.energyDeficit > 0) {\r\n        tasks.push({\r\n          id: this.generateTaskId(),\r\n          type: TaskType.HAUL_ENERGY,\r\n          priority: 80,\r\n          targetId: container.id,\r\n          targetPos: { x: container.pos.x, y: container.pos.y, roomName: this.roomName },\r\n          creepsNeeded: 1,\r\n          assignedCreeps: [],\r\n          metadata: {\r\n            energyAvailable: container.store.energy\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    return tasks;\r\n  }\r\n\r\n  private createTowerRefillTasks(report: ArchivistReport): Task[] {\r\n    const tasks: Task[] = [];\r\n\r\n    report.towers.forEach(tower => {\r\n      if (tower.needsRefill) {\r\n        const energyNeeded = tower.energyCapacity - tower.energy;\r\n        tasks.push({\r\n          id: this.generateTaskId(),\r\n          type: TaskType.REFILL_TOWER,\r\n          priority: 75,\r\n          targetId: tower.id,\r\n          creepsNeeded: Math.ceil(energyNeeded / 500),\r\n          assignedCreeps: [],\r\n          metadata: {\r\n            energyRequired: energyNeeded\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    return tasks;\r\n  }\r\n\r\n  private createConstructionTasks(report: ArchivistReport): Task[] {\r\n    const tasks: Task[] = [];\r\n\r\n    report.constructionSites.forEach(site => {\r\n      // Prioritize spawns and towers\r\n      let priority = 60;\r\n      if (site.structureType === STRUCTURE_SPAWN) priority = 85;\r\n      if (site.structureType === STRUCTURE_TOWER) priority = 80;\r\n      if (site.structureType === STRUCTURE_EXTENSION) priority = 70;\r\n\r\n      tasks.push({\r\n        id: this.generateTaskId(),\r\n        type: TaskType.BUILD,\r\n        priority: priority,\r\n        targetId: site.id,\r\n        targetPos: { x: site.pos.x, y: site.pos.y, roomName: this.roomName },\r\n        creepsNeeded: Math.ceil((site.progressTotal - site.progress) / 5000),\r\n        assignedCreeps: [],\r\n        metadata: {\r\n          structureType: site.structureType,\r\n          remainingWork: site.progressTotal - site.progress\r\n        }\r\n      });\r\n    });\r\n\r\n    return tasks;\r\n  }\r\n\r\n  private createRepairTasks(repairTargets: any[]): Task[] {\r\n    const tasks: Task[] = [];\r\n\r\n    repairTargets.forEach(target => {\r\n      tasks.push({\r\n        id: this.generateTaskId(),\r\n        type: TaskType.REPAIR,\r\n        priority: target.priority,\r\n        targetId: target.id,\r\n        targetPos: { x: target.pos.x, y: target.pos.y, roomName: this.roomName },\r\n        creepsNeeded: 1,\r\n        assignedCreeps: [],\r\n        metadata: {\r\n          structureType: target.structureType,\r\n          hitsNeeded: target.hitsMax - target.hits\r\n        }\r\n      });\r\n    });\r\n\r\n    return tasks;\r\n  }\r\n\r\n  private createUpgradeTasks(report: ArchivistReport): Task[] {\r\n    const tasks: Task[] = [];\r\n\r\n    // Always have an upgrade task available\r\n    const upgraderShortage = report.controller.upgraderRecommendation - \r\n                             report.controller.upgraderCount;\r\n\r\n    if (upgraderShortage > 0 || report.controller.ticksToDowngrade < 5000) {\r\n      const priority = report.controller.ticksToDowngrade < 5000 ? 90 : 55;\r\n      \r\n      tasks.push({\r\n        id: this.generateTaskId(),\r\n        type: TaskType.UPGRADE_CONTROLLER,\r\n        priority: priority,\r\n        targetId: report.controller.id,\r\n        creepsNeeded: Math.max(1, upgraderShortage),\r\n        assignedCreeps: []\r\n      });\r\n    }\r\n\r\n    return tasks;\r\n  }\r\n\r\n  private generateTaskId(): string {\r\n    return `task_${this.roomName}_${Game.time}_${this.taskIdCounter++}`;\r\n  }\r\n}\r\n","import { Task, CreepRequest, TaskType } from '../interfaces';\r\n\r\n/**\r\n * Legatus Genetor - The Broodmother\r\n * \r\n * Responsibility: Design and spawn creeps optimized for tasks\r\n * Philosophy: The right tool for the right job\r\n * \r\n * The Broodmother looks at the task queue and determines if a new creep\r\n * is needed. If so, it designs the perfect body for that task.\r\n */\r\nexport class LegatusGenetor {\r\n  private roomName: string;\r\n\r\n  constructor(roomName: string) {\r\n    this.roomName = roomName;\r\n  }\r\n\r\n  /**\r\n   * Analyze tasks and spawn creeps as needed\r\n   */\r\n  public run(tasks: Task[]): void {\r\n    const room = Game.rooms[this.roomName];\r\n    if (!room) return;\r\n\r\n    // Find available spawns\r\n    const spawns = room.find(FIND_MY_SPAWNS, {\r\n      filter: (s) => !s.spawning\r\n    });\r\n\r\n    if (spawns.length === 0) return;\r\n\r\n    // Find highest priority task that needs creeps\r\n    const taskNeedingCreeps = tasks.find(t => \r\n      t.assignedCreeps.length < t.creepsNeeded\r\n    );\r\n\r\n    if (!taskNeedingCreeps) return;\r\n\r\n    // Design and spawn a creep for this task\r\n    const request = this.designCreep(taskNeedingCreeps, room);\r\n    if (request) {\r\n      this.spawnCreep(spawns[0], request);\r\n    }\r\n  }\r\n\r\n  private designCreep(task: Task, room: Room): CreepRequest | null {\r\n    const energy = room.energyAvailable;\r\n    \r\n    // Design body based on task type\r\n    let body: BodyPartConstant[] = [];\r\n    let role: string = '';\r\n\r\n    switch (task.type) {\r\n      case TaskType.HARVEST_ENERGY:\r\n        body = this.designHarvester(energy);\r\n        role = 'harvester';\r\n        break;\r\n      \r\n      case TaskType.HAUL_ENERGY:\r\n      case TaskType.REFILL_TOWER:\r\n      case TaskType.REFILL_SPAWN:\r\n      case TaskType.REFILL_EXTENSION:\r\n        body = this.designHauler(energy);\r\n        role = 'hauler';\r\n        break;\r\n      \r\n      case TaskType.BUILD:\r\n        body = this.designBuilder(energy);\r\n        role = 'builder';\r\n        break;\r\n      \r\n      case TaskType.REPAIR:\r\n        body = this.designRepairer(energy);\r\n        role = 'repairer';\r\n        break;\r\n      \r\n      case TaskType.UPGRADE_CONTROLLER:\r\n        body = this.designUpgrader(energy);\r\n        role = 'upgrader';\r\n        break;\r\n      \r\n      case TaskType.DEFEND_ROOM:\r\n        body = this.designDefender(energy);\r\n        role = 'defender';\r\n        break;\r\n      \r\n      default:\r\n        body = this.designWorker(energy);\r\n        role = 'worker';\r\n    }\r\n\r\n    if (body.length === 0) return null;\r\n\r\n    const cost = this.calculateBodyCost(body);\r\n\r\n    return {\r\n      priority: task.priority,\r\n      body: body,\r\n      memory: {\r\n        role: role,\r\n        room: this.roomName,\r\n        task: task.id,\r\n        targetId: task.targetId?.toString()\r\n      },\r\n      initialTask: task,\r\n      cost: cost,\r\n      role: role\r\n    };\r\n  }\r\n\r\n  private designHarvester(energy: number): BodyPartConstant[] {\r\n    // Optimal harvester: 1 WORK per 2 MOVE for speed\r\n    // Max 5 WORK parts (source energy/tick limit)\r\n    const parts: BodyPartConstant[] = [];\r\n    const maxWork = 5;\r\n    let workParts = 0;\r\n    let moveParts = 0;\r\n\r\n    while (energy >= 150 && workParts < maxWork) {\r\n      parts.push(WORK);\r\n      parts.push(MOVE);\r\n      workParts++;\r\n      moveParts++;\r\n      energy -= 150;\r\n    }\r\n\r\n    // Add carry for pickup\r\n    if (energy >= 50) {\r\n      parts.push(CARRY);\r\n      energy -= 50;\r\n    }\r\n\r\n    return parts.length > 0 ? parts : [WORK, CARRY, MOVE];\r\n  }\r\n\r\n  private designHauler(energy: number): BodyPartConstant[] {\r\n    // Hauler: Maximize CARRY with MOVE for speed\r\n    const parts: BodyPartConstant[] = [];\r\n    \r\n    while (energy >= 100) {\r\n      parts.push(CARRY);\r\n      parts.push(MOVE);\r\n      energy -= 100;\r\n    }\r\n\r\n    return parts.length > 0 ? parts : [CARRY, MOVE];\r\n  }\r\n\r\n  private designBuilder(energy: number): BodyPartConstant[] {\r\n    // Builder: Balanced WORK, CARRY, MOVE\r\n    const parts: BodyPartConstant[] = [];\r\n    \r\n    while (energy >= 200) {\r\n      parts.push(WORK);\r\n      parts.push(CARRY);\r\n      parts.push(MOVE);\r\n      energy -= 200;\r\n    }\r\n\r\n    return parts.length > 0 ? parts : [WORK, CARRY, MOVE];\r\n  }\r\n\r\n  private designRepairer(energy: number): BodyPartConstant[] {\r\n    // Same as builder\r\n    return this.designBuilder(energy);\r\n  }\r\n\r\n  private designUpgrader(energy: number): BodyPartConstant[] {\r\n    // Upgrader: More WORK than builder for efficiency\r\n    const parts: BodyPartConstant[] = [];\r\n    \r\n    while (energy >= 300) {\r\n      parts.push(WORK);\r\n      parts.push(WORK);\r\n      parts.push(CARRY);\r\n      parts.push(MOVE);\r\n      energy -= 300;\r\n    }\r\n\r\n    return parts.length > 0 ? parts : [WORK, CARRY, MOVE];\r\n  }\r\n\r\n  private designDefender(energy: number): BodyPartConstant[] {\r\n    // Defender: ATTACK, MOVE, some TOUGH\r\n    const parts: BodyPartConstant[] = [];\r\n    \r\n    // Add tough armor first\r\n    if (energy >= 10) {\r\n      parts.push(TOUGH);\r\n      energy -= 10;\r\n    }\r\n\r\n    // Add attack and move\r\n    while (energy >= 130) {\r\n      parts.push(ATTACK);\r\n      parts.push(MOVE);\r\n      energy -= 130;\r\n    }\r\n\r\n    return parts.length > 0 ? parts : [ATTACK, MOVE];\r\n  }\r\n\r\n  private designWorker(energy: number): BodyPartConstant[] {\r\n    // Generic worker: balanced parts\r\n    const parts: BodyPartConstant[] = [];\r\n    \r\n    while (energy >= 200) {\r\n      parts.push(WORK);\r\n      parts.push(CARRY);\r\n      parts.push(MOVE);\r\n      energy -= 200;\r\n    }\r\n\r\n    return parts.length > 0 ? parts : [WORK, CARRY, MOVE];\r\n  }\r\n\r\n  private calculateBodyCost(body: BodyPartConstant[]): number {\r\n    const costs: { [key: string]: number } = {\r\n      [MOVE]: 50,\r\n      [WORK]: 100,\r\n      [CARRY]: 50,\r\n      [ATTACK]: 80,\r\n      [RANGED_ATTACK]: 150,\r\n      [HEAL]: 250,\r\n      [TOUGH]: 10,\r\n      [CLAIM]: 600\r\n    };\r\n\r\n    return body.reduce((sum, part) => sum + (costs[part] || 0), 0);\r\n  }\r\n\r\n  private spawnCreep(spawn: StructureSpawn, request: CreepRequest): void {\r\n    const name = `${request.role}_${Game.time}`;\r\n    const result = spawn.spawnCreep(request.body, name, { memory: request.memory });\r\n\r\n    if (result === OK) {\r\n      console.log(`🏛️ Spawning ${request.role}: ${name} (${request.cost} energy)`);\r\n    } else if (result === ERR_NOT_ENOUGH_ENERGY) {\r\n      // This is fine - we'll try again next tick\r\n    } else {\r\n      console.log(`⚠️ Failed to spawn ${request.role}: ${result}`);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Legatus Fabrum - The Architect\r\n * \r\n * Responsibility: Place construction sites according to room blueprints\r\n * Philosophy: Every room should be a masterpiece of efficiency\r\n * \r\n * The Architect plans and places structures to optimize room layout.\r\n * This is complex logic that will be implemented in future phases.\r\n */\r\nexport class LegatusFabrum {\r\n  private roomName: string;\r\n\r\n  constructor(roomName: string) {\r\n    this.roomName = roomName;\r\n  }\r\n\r\n  /**\r\n   * Analyze room and place construction sites\r\n   * TODO: Implement room planning logic\r\n   */\r\n  public run(): void {\r\n    // STUB: Room planning logic will be implemented later\r\n    // This will include:\r\n    // - Extension placement optimization\r\n    // - Road planning (coordinate with Legatus Viae)\r\n    // - Defense structure placement\r\n    // - Storage and terminal positioning\r\n    \r\n    // Suppress unused variable warning - will be used in future implementation\r\n    void this.roomName;\r\n  }\r\n}\r\n","/**\r\n * Legatus Viae - The Trailblazer\r\n * \r\n * Responsibility: Analyze traffic and build roads\r\n * Philosophy: The shortest path between two points is a Roman road\r\n * \r\n * The Trailblazer monitors creep movement patterns and builds roads\r\n * in high-traffic areas to improve efficiency.\r\n */\r\nexport class LegatusViae {\r\n  private roomName: string;\r\n\r\n  constructor(roomName: string) {\r\n    this.roomName = roomName;\r\n  }\r\n\r\n  /**\r\n   * Analyze traffic patterns and place road construction sites\r\n   * TODO: Implement traffic analysis and road planning\r\n   */\r\n  public run(): void {\r\n    // STUB: Traffic analysis logic will be implemented later\r\n    // This will include:\r\n    // - Tracking creep movement patterns\r\n    // - Identifying high-traffic positions\r\n    // - Placing road construction sites\r\n    // - Optimizing paths between key structures\r\n    \r\n    // Suppress unused variable warning - will be used in future implementation\r\n    void this.roomName;\r\n  }\r\n}\r\n","import { LegatusArchivus } from '../magistrates/LegatusArchivus';\r\nimport { LegatusOfficio } from '../magistrates/LegatusOfficio';\r\nimport { LegatusGenetor } from '../magistrates/LegatusGenetor';\r\nimport { LegatusFabrum } from '../magistrates/LegatusFabrum';\r\nimport { LegatusViae } from '../magistrates/LegatusViae';\r\n\r\n/**\r\n * Room-specific magistrate instances\r\n */\r\ninterface RoomMagistrates {\r\n  archivist: LegatusArchivus;\r\n  taskmaster: LegatusOfficio;\r\n  broodmother: LegatusGenetor;\r\n  architect: LegatusFabrum;\r\n  trailblazer: LegatusViae;\r\n}\r\n\r\n/**\r\n * The Empire - The Principate\r\n * \r\n * The highest authority in Project Imperium. Orchestrates all subordinate systems\r\n * and executes the grand strategy each tick.\r\n * \r\n * Responsibilities:\r\n * - Initialize all Magistrate instances per room\r\n * - Execute the main decision cycle each tick\r\n * - Handle empire-wide state management\r\n * - Maintain the magistrate execution chain\r\n */\r\nexport class Empire {\r\n  private isInitialized: boolean = false;\r\n  private magistratesByRoom: Map<string, RoomMagistrates> = new Map();\r\n\r\n  constructor() {\r\n    console.log('🏛️ The Empire awakens...');\r\n  }\r\n\r\n  /**\r\n   * Main execution function - called every game tick\r\n   */\r\n  public run(): void {\r\n    if (!this.isInitialized) {\r\n      this.initialize();\r\n    }\r\n\r\n    // TODO: This will be expanded after Magistrate classes are built\r\n    this.executeImperialStrategy();\r\n  }\r\n\r\n  private initialize(): void {\r\n    console.log('⚔️ Ave Imperator! Project Imperium initializing...');\r\n    \r\n    // TODO: Initialize Consuls (after they are created)\r\n    // TODO: Initialize Magistrates for each room\r\n    \r\n    this.isInitialized = true;\r\n  }\r\n\r\n  private executeImperialStrategy(): void {\r\n    // High-level empire logic - coordinate all rooms\r\n    // Each room has its own magistrate council\r\n    \r\n    for (const roomName in Game.rooms) {\r\n      const room = Game.rooms[roomName];\r\n      \r\n      // Only manage rooms we control\r\n      if (room.controller && room.controller.my) {\r\n        this.manageColonia(room);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Manage a single colony (room) through its magistrate council\r\n   * Executes the full decision and execution chain\r\n   */\r\n  private manageColonia(room: Room): void {\r\n    // Get or create magistrates for this room\r\n    if (!this.magistratesByRoom.has(room.name)) {\r\n      this.magistratesByRoom.set(room.name, {\r\n        archivist: new LegatusArchivus(room.name),\r\n        taskmaster: new LegatusOfficio(room.name),\r\n        broodmother: new LegatusGenetor(room.name),\r\n        architect: new LegatusFabrum(room.name),\r\n        trailblazer: new LegatusViae(room.name)\r\n      });\r\n    }\r\n\r\n    const magistrates = this.magistratesByRoom.get(room.name)!;\r\n\r\n    // Execute the Magistrate chain in order\r\n    // 1. Archivist observes the room state\r\n    const report = magistrates.archivist.run(room);\r\n    \r\n    // 2. Taskmaster generates tasks based on the report\r\n    const tasks = magistrates.taskmaster.run(report);\r\n    \r\n    // 3. Broodmother spawns creeps based on tasks\r\n    magistrates.broodmother.run(tasks);\r\n    \r\n    // 4. Architect handles construction\r\n    magistrates.architect.run();\r\n    \r\n    // 5. Trailblazer handles pathfinding and movement\r\n    magistrates.trailblazer.run();\r\n  }\r\n}\r\n","import { Empire } from './principate/Empire';\r\n\r\n// Initialize the Empire once (persists across ticks via global scope)\r\nconst empire = new Empire();\r\n\r\n// This is the main game loop - called every tick by Screeps\r\nexport const loop = (): void => {\r\n  try {\r\n    // Clear dead creep memory\r\n    for (const name in Memory.creeps) {\r\n      if (!(name in Game.creeps)) {\r\n        delete Memory.creeps[name];\r\n      }\r\n    }\r\n\r\n    // Execute the Empire's master plan\r\n    empire.run();\r\n  } catch (error) {\r\n    console.log(`❌ CRITICAL ERROR in main loop: ${error}`);\r\n    if (error instanceof Error) {\r\n      console.log(`Stack: ${error.stack}`);\r\n    }\r\n  }\r\n};\r\n"],"names":[],"mappings":";;AAAA;AAcA;;;;;;;;AAQG;MACU,eAAe,CAAA;AAC1B,IAAA,WAAA,CAAqB,QAAgB,EAAA;QAAhB,IAAA,CAAA,QAAQ,GAAR,QAAQ;IAAW;AAExC;;AAEG;AACI,IAAA,GAAG,CAAC,IAAU,EAAA;;QACnB,OAAO;YACL,QAAQ,EAAE,IAAI,CAAC,IAAI;YACnB,GAAG,EAAE,CAAA,CAAA,EAAA,GAAA,IAAI,CAAC,UAAU,MAAA,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAE,KAAK,KAAI,CAAC;YAEhC,eAAe,EAAE,IAAI,CAAC,eAAe;YACrC,uBAAuB,EAAE,IAAI,CAAC,uBAAuB;AACrD,YAAA,aAAa,EAAE,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,eAAe;AAElE,YAAA,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;AAClC,YAAA,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;AAChC,YAAA,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBACxC,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,aAAa,KAAK;AACpC,aAAA,CAAC,CAAC,MAAM;AACT,YAAA,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;AAChC,YAAA,UAAU,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;AACxC,YAAA,gBAAgB,EAAE,IAAI,CAAC,OAAO,KAAK,SAAS;AAC5C,YAAA,aAAa,EAAE,CAAA,CAAA,EAAA,GAAA,IAAI,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAE,KAAK,CAAC,eAAe,CAAC,KAAI,CAAC;AAExD,YAAA,iBAAiB,EAAE,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC;AACtD,YAAA,aAAa,EAAE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC;AAE9C,YAAA,UAAU,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;AAExC,YAAA,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;AACpC,YAAA,kBAAkB,EAAE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC;AAEnD,YAAA,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;AAC1C,YAAA,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;YAExC,oBAAoB,EAAE,EAAE;SACzB;IACH;AAEA;;AAEG;AACK,IAAA,cAAc,CAAC,IAAU,EAAA;QAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;AACvC,QAAA,OAAO,OAAO,CAAC,GAAG,CAAC,MAAM,IAAG;AAC1B,YAAA,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;AAC3C,gBAAA,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,WAAW;AAC7B,oBAAA,CAAC,CAAC,MAAM,CAAC,QAAQ,KAAK,MAAM,CAAC;AAC7C,aAAA,CAAC;YAEF,OAAO;gBACL,EAAE,EAAE,MAAM,CAAC,EAAE;AACb,gBAAA,GAAG,EAAE,EAAE,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;gBACzC,MAAM,EAAE,MAAM,CAAC,MAAM;gBACrB,cAAc,EAAE,MAAM,CAAC,cAAc;gBACrC,iBAAiB,EAAE,UAAU,CAAC,MAAM;gBACpC,gBAAgB,EAAE,CAAC;aACpB;AACH,QAAA,CAAC,CAAC;IACJ;AAEA;;AAEG;AACK,IAAA,aAAa,CAAC,IAAU,EAAA;QAC9B,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;QACxC,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,KAAK;YAC1B,EAAE,EAAE,KAAK,CAAC,EAAE;AACZ,YAAA,QAAQ,EAAE,KAAK,CAAC,QAAQ,KAAK,IAAI;AACjC,YAAA,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,eAAe,CAAC;YACpC,cAAc,EAAE,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,eAAe;AACxD,SAAA,CAAC,CAAC;IACL;AAEA;;AAEG;AACK,IAAA,aAAa,CAAC,IAAU,EAAA;AAC9B,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YAC3C,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,aAAa,KAAK;AACpC,SAAA,CAAqB;QAEtB,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,KAAK;YAC1B,EAAE,EAAE,KAAK,CAAC,EAAE;AACZ,YAAA,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,eAAe,CAAC;YACpC,cAAc,EAAE,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,eAAe,CAAC;AACxD,YAAA,WAAW,EAAE,KAAK,CAAC,KAAK,CAAC,eAAe,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,eAAe,CAAC,GAAG;AACxF,SAAA,CAAC,CAAC;IACL;AAEA;;AAEG;AACK,IAAA,iBAAiB,CAAC,IAAU,EAAA;AAClC,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YAC5C,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,aAAa,KAAK;AACpC,SAAA,CAAyB;QAE1B,OAAO,UAAU,CAAC,GAAG,CAAC,SAAS,KAAK;YAClC,EAAE,EAAE,SAAS,CAAC,EAAE;AAChB,YAAA,GAAG,EAAE,EAAE,CAAC,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE;YAC/C,KAAK,EAAE,EAAE,MAAM,EAAE,SAAS,CAAC,KAAK,CAAC,eAAe,CAAC,EAAE;YACnD,aAAa,EAAE,SAAS,CAAC,KAAK,CAAC,WAAW,CAAC,eAAe;AAC3D,SAAA,CAAC,CAAC;IACL;AAEA;;AAEG;AACK,IAAA,wBAAwB,CAAC,IAAU,EAAA;QACzC,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC;QACnD,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,KAAK;YACxB,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,aAAa,EAAE,IAAI,CAAC,aAAa;AACjC,YAAA,GAAG,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;AACpC,SAAA,CAAC,CAAC;IACL;AAEA;;AAEG;AACK,IAAA,oBAAoB,CAAC,IAAU,EAAA;AACrC,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;AAC5C,YAAA,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,aAAa,KAAK;AAC1D,SAAA,CAAC;QAEF,OAAO,UAAU,CAAC,GAAG,CAAC,SAAS,KAAK;YAClC,EAAE,EAAE,SAAS,CAAC,EAAE;YAChB,aAAa,EAAE,SAAS,CAAC,aAAa;YACtC,IAAI,EAAE,SAAS,CAAC,IAAI;YACpB,OAAO,EAAE,SAAS,CAAC,OAAO;AAC1B,YAAA,QAAQ,EAAE,IAAI,CAAC,uBAAuB,CAAC,SAAS,CAAC;AACjD,YAAA,GAAG,EAAE,EAAE,CAAC,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC;AAC9C,SAAA,CAAC,CAAC;IACL;AAEA;;AAEG;AACK,IAAA,uBAAuB,CAAC,SAAoB,EAAA;QAClD,MAAM,UAAU,GAAG,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,OAAO;;AAGrD,QAAA,MAAM,kBAAkB,GAAwB;YAC9C,eAAe;YACf,eAAe;YACf,iBAAiB;YACjB;SACD;QAED,IAAK,kBAA0C,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE;YACjF,OAAO,UAAU,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE;QACnC;QAEA,OAAO,UAAU,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE;IACnC;AAEA;;AAEG;AACK,IAAA,iBAAiB,CAAC,IAAU,EAAA;AAClC,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,UAAW;QACnC,OAAO;YACL,EAAE,EAAE,UAAU,CAAC,EAAE;YACjB,KAAK,EAAE,UAAU,CAAC,KAAK;YACvB,QAAQ,EAAE,UAAU,CAAC,QAAQ;YAC7B,aAAa,EAAE,UAAU,CAAC,aAAa;AACvC,YAAA,gBAAgB,EAAE,UAAU,CAAC,gBAAgB,IAAI,CAAC;AAClD,YAAA,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;AACxC,YAAA,sBAAsB,EAAE,IAAI,CAAC,kBAAkB,CAAC,UAAU;SAC3D;IACH;AAEA;;AAEG;AACK,IAAA,cAAc,CAAC,IAAU,EAAA;AAC/B,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;AAC/B,YAAA,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK;SAClC,CAAC,CAAC,MAAM;IACX;AAEA;;AAEG;AACK,IAAA,kBAAkB,CAAC,UAA+B,EAAA;;AAExD,QAAA,IAAI,UAAU,CAAC,KAAK,GAAG,CAAC;AAAE,YAAA,OAAO,CAAC;AAClC,QAAA,IAAI,UAAU,CAAC,KAAK,GAAG,CAAC;AAAE,YAAA,OAAO,CAAC;AAClC,QAAA,OAAO,CAAC;IACV;AAEA;;AAEG;AACK,IAAA,eAAe,CAAC,IAAU,EAAA;QAChC,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC;QAC/C,OAAO,QAAQ,CAAC,GAAG,CAAC,OAAO,KAAK;YAC9B,EAAE,EAAE,OAAO,CAAC,EAAE;AACd,YAAA,GAAG,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE;AAC3C,YAAA,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,QAAQ;AAC7B,YAAA,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC;AACzC,YAAA,WAAW,EAAE,IAAI,CAAC,oBAAoB,CAAC,OAAO;AAC/C,SAAA,CAAC,CAAC;IACL;AAEA;;AAEG;AACK,IAAA,oBAAoB,CAAC,KAAY,EAAA;QACvC,IAAI,MAAM,GAAG,CAAC;AACd,QAAA,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAG;AACxB,YAAA,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM;gBAAE,MAAM,IAAI,CAAC;AACrC,YAAA,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa;gBAAE,MAAM,IAAI,CAAC;AAC5C,YAAA,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI;gBAAE,MAAM,IAAI,CAAC;AACnC,YAAA,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK;gBAAE,MAAM,IAAI,CAAC;AACtC,QAAA,CAAC,CAAC;AACF,QAAA,OAAO,MAAM;IACf;AAEA;;AAEG;AACK,IAAA,oBAAoB,CAAC,IAAU,EAAA;QACrC,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC;AAC/C,QAAA,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC;AAAE,YAAA,OAAO,CAAC;QAEnC,MAAM,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AACtF,QAAA,OAAO,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;IACjD;AAEA;;AAEG;AACK,IAAA,iBAAiB,CAAC,IAAU,EAAA;QAClC,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;AACxC,QAAA,MAAM,MAAM,GAAG,IAAI,GAAG,EAAkB;AAExC,QAAA,MAAM,CAAC,OAAO,CAAC,KAAK,IAAG;YACrB,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,IAAI,SAAS;AAC3C,YAAA,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC/C,QAAA,CAAC,CAAC;AAEF,QAAA,OAAO,MAAM;IACf;AAEA;;AAEG;AACK,IAAA,gBAAgB,CAAC,IAAU,EAAA;QACjC,OAAO,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,MAAM;IACzC;AACD;;ACtRD;;;AAGG;AACH,IAAY,QA6BX;AA7BD,CAAA,UAAY,QAAQ,EAAA;;AAElB,IAAA,QAAA,CAAA,gBAAA,CAAA,GAAA,gBAAiC;AACjC,IAAA,QAAA,CAAA,aAAA,CAAA,GAAA,aAA2B;AAC3B,IAAA,QAAA,CAAA,iBAAA,CAAA,GAAA,iBAAmC;;AAGnC,IAAA,QAAA,CAAA,OAAA,CAAA,GAAA,OAAe;AACf,IAAA,QAAA,CAAA,QAAA,CAAA,GAAA,QAAiB;;AAGjB,IAAA,QAAA,CAAA,oBAAA,CAAA,GAAA,oBAAyC;;AAGzC,IAAA,QAAA,CAAA,aAAA,CAAA,GAAA,aAA2B;AAC3B,IAAA,QAAA,CAAA,eAAA,CAAA,GAAA,eAA+B;;AAG/B,IAAA,QAAA,CAAA,cAAA,CAAA,GAAA,cAA6B;AAC7B,IAAA,QAAA,CAAA,kBAAA,CAAA,GAAA,kBAAqC;AACrC,IAAA,QAAA,CAAA,cAAA,CAAA,GAAA,cAA6B;;AAG7B,IAAA,QAAA,CAAA,kBAAA,CAAA,GAAA,kBAAqC;AACrC,IAAA,QAAA,CAAA,oBAAA,CAAA,GAAA,oBAAyC;AACzC,IAAA,QAAA,CAAA,YAAA,CAAA,GAAA,YAAyB;;AAGzB,IAAA,QAAA,CAAA,MAAA,CAAA,GAAA,MAAa;AACf,CAAC,EA7BW,QAAQ,KAAR,QAAQ,GAAA,EAAA,CAAA,CAAA;;ACFpB;;;;;;;;AAQG;MACU,cAAc,CAAA;AAIzB,IAAA,WAAA,CAAY,QAAgB,EAAA;QAFpB,IAAA,CAAA,aAAa,GAAW,CAAC;AAG/B,QAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ;IAC1B;AAEA;;AAEG;AACI,IAAA,GAAG,CAAC,MAAuB,EAAA;QAChC,MAAM,KAAK,GAAW,EAAE;;AAGxB,QAAA,IAAI,MAAM,CAAC,kBAAkB,GAAG,CAAC,EAAE;YACjC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAChD;;AAGA,QAAA,IAAI,MAAM,CAAC,aAAa,GAAG,CAAC,EAAE;YAC5B,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAC/C;;AAGA,QAAA,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,EAAE;YAC1C,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;QACpD;;QAGA,IAAI,MAAM,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;YACvC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;QACrD;;AAGA,QAAA,MAAM,eAAe,GAAG,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,GAAG,EAAE,CAAC;AACzE,QAAA,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;YAC9B,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;QACxD;;QAGA,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;;AAG9C,QAAA,MAAM,YAAY,GAAG,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,IAAI,EAAE,CAAC;AACvE,QAAA,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3B,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QACrD;;AAGA,QAAA,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC;IACtD;AAEQ,IAAA,kBAAkB,CAAC,MAAuB,EAAA;QAChD,MAAM,KAAK,GAAW,EAAE;AAExB,QAAA,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,IAAG;YAChC,KAAK,CAAC,IAAI,CAAC;AACT,gBAAA,EAAE,EAAE,IAAI,CAAC,cAAc,EAAE;gBACzB,IAAI,EAAE,QAAQ,CAAC,WAAW;AAC1B,gBAAA,QAAQ,EAAE,EAAE,GAAG,MAAM,CAAC,kBAAkB;gBACxC,QAAQ,EAAE,OAAO,CAAC,EAAE;gBACpB,SAAS,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE;gBAC1E,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,EAAE,CAAC;AACjD,gBAAA,cAAc,EAAE;AACjB,aAAA,CAAC;AACJ,QAAA,CAAC,CAAC;AAEF,QAAA,OAAO,KAAK;IACd;AAEQ,IAAA,iBAAiB,CAAC,MAAuB,EAAA;QAC/C,MAAM,KAAK,GAAW,EAAE;;AAGxB,QAAA,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,IAAG;AAC9B,YAAA,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,iBAAiB,GAAG,MAAM,CAAC,gBAAgB,EAAE;gBAC3E,KAAK,CAAC,IAAI,CAAC;AACT,oBAAA,EAAE,EAAE,IAAI,CAAC,cAAc,EAAE;oBACzB,IAAI,EAAE,QAAQ,CAAC,cAAc;AAC7B,oBAAA,QAAQ,EAAE,EAAE;oBACZ,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,SAAS,EAAE,EAAE,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE;AACxE,oBAAA,YAAY,EAAE,MAAM,CAAC,gBAAgB,GAAG,MAAM,CAAC,iBAAiB;AAChE,oBAAA,cAAc,EAAE;AACjB,iBAAA,CAAC;YACJ;AACF,QAAA,CAAC,CAAC;;AAGF,QAAA,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,IAAG;AACpC,YAAA,IAAI,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,IAAI,MAAM,CAAC,aAAa,GAAG,CAAC,EAAE;gBAC5D,KAAK,CAAC,IAAI,CAAC;AACT,oBAAA,EAAE,EAAE,IAAI,CAAC,cAAc,EAAE;oBACzB,IAAI,EAAE,QAAQ,CAAC,WAAW;AAC1B,oBAAA,QAAQ,EAAE,EAAE;oBACZ,QAAQ,EAAE,SAAS,CAAC,EAAE;oBACtB,SAAS,EAAE,EAAE,CAAC,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE;AAC9E,oBAAA,YAAY,EAAE,CAAC;AACf,oBAAA,cAAc,EAAE,EAAE;AAClB,oBAAA,QAAQ,EAAE;AACR,wBAAA,eAAe,EAAE,SAAS,CAAC,KAAK,CAAC;AAClC;AACF,iBAAA,CAAC;YACJ;AACF,QAAA,CAAC,CAAC;AAEF,QAAA,OAAO,KAAK;IACd;AAEQ,IAAA,sBAAsB,CAAC,MAAuB,EAAA;QACpD,MAAM,KAAK,GAAW,EAAE;AAExB,QAAA,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,IAAG;AAC5B,YAAA,IAAI,KAAK,CAAC,WAAW,EAAE;gBACrB,MAAM,YAAY,GAAG,KAAK,CAAC,cAAc,GAAG,KAAK,CAAC,MAAM;gBACxD,KAAK,CAAC,IAAI,CAAC;AACT,oBAAA,EAAE,EAAE,IAAI,CAAC,cAAc,EAAE;oBACzB,IAAI,EAAE,QAAQ,CAAC,YAAY;AAC3B,oBAAA,QAAQ,EAAE,EAAE;oBACZ,QAAQ,EAAE,KAAK,CAAC,EAAE;oBAClB,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;AAC3C,oBAAA,cAAc,EAAE,EAAE;AAClB,oBAAA,QAAQ,EAAE;AACR,wBAAA,cAAc,EAAE;AACjB;AACF,iBAAA,CAAC;YACJ;AACF,QAAA,CAAC,CAAC;AAEF,QAAA,OAAO,KAAK;IACd;AAEQ,IAAA,uBAAuB,CAAC,MAAuB,EAAA;QACrD,MAAM,KAAK,GAAW,EAAE;AAExB,QAAA,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,IAAG;;YAEtC,IAAI,QAAQ,GAAG,EAAE;AACjB,YAAA,IAAI,IAAI,CAAC,aAAa,KAAK,eAAe;gBAAE,QAAQ,GAAG,EAAE;AACzD,YAAA,IAAI,IAAI,CAAC,aAAa,KAAK,eAAe;gBAAE,QAAQ,GAAG,EAAE;AACzD,YAAA,IAAI,IAAI,CAAC,aAAa,KAAK,mBAAmB;gBAAE,QAAQ,GAAG,EAAE;YAE7D,KAAK,CAAC,IAAI,CAAC;AACT,gBAAA,EAAE,EAAE,IAAI,CAAC,cAAc,EAAE;gBACzB,IAAI,EAAE,QAAQ,CAAC,KAAK;AACpB,gBAAA,QAAQ,EAAE,QAAQ;gBAClB,QAAQ,EAAE,IAAI,CAAC,EAAE;gBACjB,SAAS,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE;AACpE,gBAAA,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC;AACpE,gBAAA,cAAc,EAAE,EAAE;AAClB,gBAAA,QAAQ,EAAE;oBACR,aAAa,EAAE,IAAI,CAAC,aAAa;AACjC,oBAAA,aAAa,EAAE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAC1C;AACF,aAAA,CAAC;AACJ,QAAA,CAAC,CAAC;AAEF,QAAA,OAAO,KAAK;IACd;AAEQ,IAAA,iBAAiB,CAAC,aAAoB,EAAA;QAC5C,MAAM,KAAK,GAAW,EAAE;AAExB,QAAA,aAAa,CAAC,OAAO,CAAC,MAAM,IAAG;YAC7B,KAAK,CAAC,IAAI,CAAC;AACT,gBAAA,EAAE,EAAE,IAAI,CAAC,cAAc,EAAE;gBACzB,IAAI,EAAE,QAAQ,CAAC,MAAM;gBACrB,QAAQ,EAAE,MAAM,CAAC,QAAQ;gBACzB,QAAQ,EAAE,MAAM,CAAC,EAAE;gBACnB,SAAS,EAAE,EAAE,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE;AACxE,gBAAA,YAAY,EAAE,CAAC;AACf,gBAAA,cAAc,EAAE,EAAE;AAClB,gBAAA,QAAQ,EAAE;oBACR,aAAa,EAAE,MAAM,CAAC,aAAa;AACnC,oBAAA,UAAU,EAAE,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;AACrC;AACF,aAAA,CAAC;AACJ,QAAA,CAAC,CAAC;AAEF,QAAA,OAAO,KAAK;IACd;AAEQ,IAAA,kBAAkB,CAAC,MAAuB,EAAA;QAChD,MAAM,KAAK,GAAW,EAAE;;AAGxB,QAAA,MAAM,gBAAgB,GAAG,MAAM,CAAC,UAAU,CAAC,sBAAsB;AACxC,YAAA,MAAM,CAAC,UAAU,CAAC,aAAa;AAExD,QAAA,IAAI,gBAAgB,GAAG,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,gBAAgB,GAAG,IAAI,EAAE;AACrE,YAAA,MAAM,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE;YAEpE,KAAK,CAAC,IAAI,CAAC;AACT,gBAAA,EAAE,EAAE,IAAI,CAAC,cAAc,EAAE;gBACzB,IAAI,EAAE,QAAQ,CAAC,kBAAkB;AACjC,gBAAA,QAAQ,EAAE,QAAQ;AAClB,gBAAA,QAAQ,EAAE,MAAM,CAAC,UAAU,CAAC,EAAE;gBAC9B,YAAY,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,gBAAgB,CAAC;AAC3C,gBAAA,cAAc,EAAE;AACjB,aAAA,CAAC;QACJ;AAEA,QAAA,OAAO,KAAK;IACd;IAEQ,cAAc,GAAA;AACpB,QAAA,OAAO,CAAA,KAAA,EAAQ,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAA,CAAA,EAAI,IAAI,CAAC,aAAa,EAAE,EAAE;IACrE;AACD;;AC1ND;;;;;;;;AAQG;MACU,cAAc,CAAA;AAGzB,IAAA,WAAA,CAAY,QAAgB,EAAA;AAC1B,QAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ;IAC1B;AAEA;;AAEG;AACI,IAAA,GAAG,CAAC,KAAa,EAAA;QACtB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;AACtC,QAAA,IAAI,CAAC,IAAI;YAAE;;AAGX,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACvC,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACnB,SAAA,CAAC;AAEF,QAAA,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;YAAE;;QAGzB,MAAM,iBAAiB,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,IACpC,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,YAAY,CACzC;AAED,QAAA,IAAI,CAAC,iBAAiB;YAAE;;QAGxB,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,IAAI,CAAC;QACzD,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;QACrC;IACF;IAEQ,WAAW,CAAC,IAAU,EAAE,IAAU,EAAA;;AACxC,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe;;QAGnC,IAAI,IAAI,GAAuB,EAAE;QACjC,IAAI,IAAI,GAAW,EAAE;AAErB,QAAA,QAAQ,IAAI,CAAC,IAAI;YACf,KAAK,QAAQ,CAAC,cAAc;AAC1B,gBAAA,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;gBACnC,IAAI,GAAG,WAAW;gBAClB;YAEF,KAAK,QAAQ,CAAC,WAAW;YACzB,KAAK,QAAQ,CAAC,YAAY;YAC1B,KAAK,QAAQ,CAAC,YAAY;YAC1B,KAAK,QAAQ,CAAC,gBAAgB;AAC5B,gBAAA,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;gBAChC,IAAI,GAAG,QAAQ;gBACf;YAEF,KAAK,QAAQ,CAAC,KAAK;AACjB,gBAAA,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;gBACjC,IAAI,GAAG,SAAS;gBAChB;YAEF,KAAK,QAAQ,CAAC,MAAM;AAClB,gBAAA,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;gBAClC,IAAI,GAAG,UAAU;gBACjB;YAEF,KAAK,QAAQ,CAAC,kBAAkB;AAC9B,gBAAA,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;gBAClC,IAAI,GAAG,UAAU;gBACjB;YAEF,KAAK,QAAQ,CAAC,WAAW;AACvB,gBAAA,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;gBAClC,IAAI,GAAG,UAAU;gBACjB;AAEF,YAAA;AACE,gBAAA,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;gBAChC,IAAI,GAAG,QAAQ;;AAGnB,QAAA,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;AAAE,YAAA,OAAO,IAAI;QAElC,MAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;QAEzC,OAAO;YACL,QAAQ,EAAE,IAAI,CAAC,QAAQ;AACvB,YAAA,IAAI,EAAE,IAAI;AACV,YAAA,MAAM,EAAE;AACN,gBAAA,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,IAAI,CAAC,QAAQ;gBACnB,IAAI,EAAE,IAAI,CAAC,EAAE;AACb,gBAAA,QAAQ,EAAE,CAAA,EAAA,GAAA,IAAI,CAAC,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAE,QAAQ;AAClC,aAAA;AACD,YAAA,WAAW,EAAE,IAAI;AACjB,YAAA,IAAI,EAAE,IAAI;AACV,YAAA,IAAI,EAAE;SACP;IACH;AAEQ,IAAA,eAAe,CAAC,MAAc,EAAA;;;QAGpC,MAAM,KAAK,GAAuB,EAAE;QACpC,MAAM,OAAO,GAAG,CAAC;QACjB,IAAI,SAAS,GAAG,CAAC;QAGjB,OAAO,MAAM,IAAI,GAAG,IAAI,SAAS,GAAG,OAAO,EAAE;AAC3C,YAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;AAChB,YAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;AAChB,YAAA,SAAS,EAAE;YAEX,MAAM,IAAI,GAAG;QACf;;AAGA,QAAA,IAAI,MAAM,IAAI,EAAE,EAAE;AAChB,YAAA,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;YACjB,MAAM,IAAI,EAAE;QACd;AAEA,QAAA,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;IACvD;AAEQ,IAAA,YAAY,CAAC,MAAc,EAAA;;QAEjC,MAAM,KAAK,GAAuB,EAAE;AAEpC,QAAA,OAAO,MAAM,IAAI,GAAG,EAAE;AACpB,YAAA,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;AACjB,YAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;YAChB,MAAM,IAAI,GAAG;QACf;AAEA,QAAA,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC;IACjD;AAEQ,IAAA,aAAa,CAAC,MAAc,EAAA;;QAElC,MAAM,KAAK,GAAuB,EAAE;AAEpC,QAAA,OAAO,MAAM,IAAI,GAAG,EAAE;AACpB,YAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;AAChB,YAAA,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;AACjB,YAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;YAChB,MAAM,IAAI,GAAG;QACf;AAEA,QAAA,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;IACvD;AAEQ,IAAA,cAAc,CAAC,MAAc,EAAA;;AAEnC,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;IACnC;AAEQ,IAAA,cAAc,CAAC,MAAc,EAAA;;QAEnC,MAAM,KAAK,GAAuB,EAAE;AAEpC,QAAA,OAAO,MAAM,IAAI,GAAG,EAAE;AACpB,YAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;AAChB,YAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;AAChB,YAAA,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;AACjB,YAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;YAChB,MAAM,IAAI,GAAG;QACf;AAEA,QAAA,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;IACvD;AAEQ,IAAA,cAAc,CAAC,MAAc,EAAA;;QAEnC,MAAM,KAAK,GAAuB,EAAE;;AAGpC,QAAA,IAAI,MAAM,IAAI,EAAE,EAAE;AAChB,YAAA,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;YACjB,MAAM,IAAI,EAAE;QACd;;AAGA,QAAA,OAAO,MAAM,IAAI,GAAG,EAAE;AACpB,YAAA,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;AAClB,YAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;YAChB,MAAM,IAAI,GAAG;QACf;AAEA,QAAA,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC;IAClD;AAEQ,IAAA,YAAY,CAAC,MAAc,EAAA;;QAEjC,MAAM,KAAK,GAAuB,EAAE;AAEpC,QAAA,OAAO,MAAM,IAAI,GAAG,EAAE;AACpB,YAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;AAChB,YAAA,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;AACjB,YAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;YAChB,MAAM,IAAI,GAAG;QACf;AAEA,QAAA,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;IACvD;AAEQ,IAAA,iBAAiB,CAAC,IAAwB,EAAA;AAChD,QAAA,MAAM,KAAK,GAA8B;YACvC,CAAC,IAAI,GAAG,EAAE;YACV,CAAC,IAAI,GAAG,GAAG;YACX,CAAC,KAAK,GAAG,EAAE;YACX,CAAC,MAAM,GAAG,EAAE;YACZ,CAAC,aAAa,GAAG,GAAG;YACpB,CAAC,IAAI,GAAG,GAAG;YACX,CAAC,KAAK,GAAG,EAAE;YACX,CAAC,KAAK,GAAG;SACV;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;IAChE;IAEQ,UAAU,CAAC,KAAqB,EAAE,OAAqB,EAAA;QAC7D,MAAM,IAAI,GAAG,CAAA,EAAG,OAAO,CAAC,IAAI,CAAA,CAAA,EAAI,IAAI,CAAC,IAAI,CAAA,CAAE;QAC3C,MAAM,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC;AAE/E,QAAA,IAAI,MAAM,KAAK,EAAE,EAAE;AACjB,YAAA,OAAO,CAAC,GAAG,CAAC,CAAA,aAAA,EAAgB,OAAO,CAAC,IAAI,CAAA,EAAA,EAAK,IAAI,KAAK,OAAO,CAAC,IAAI,CAAA,QAAA,CAAU,CAAC;QAC/E;AAAO,aAAA,IAAI,MAAM,KAAK,qBAAqB,EAAE;aAEtC;YACL,OAAO,CAAC,GAAG,CAAC,CAAA,mBAAA,EAAsB,OAAO,CAAC,IAAI,CAAA,EAAA,EAAK,MAAM,CAAA,CAAE,CAAC;QAC9D;IACF;AACD;;ACpPD;;;;;;;;AAQG;MACU,aAAa,CAAA;AAGxB,IAAA,WAAA,CAAY,QAAgB,EAAA;AAC1B,QAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ;IAC1B;AAEA;;;AAGG;IACI,GAAG,GAAA;;;;;;;;QASR,KAAK,IAAI,CAAC,QAAQ;IACpB;AACD;;AC/BD;;;;;;;;AAQG;MACU,WAAW,CAAA;AAGtB,IAAA,WAAA,CAAY,QAAgB,EAAA;AAC1B,QAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ;IAC1B;AAEA;;;AAGG;IACI,GAAG,GAAA;;;;;;;;QASR,KAAK,IAAI,CAAC,QAAQ;IACpB;AACD;;ACdD;;;;;;;;;;;AAWG;MACU,MAAM,CAAA;AAIjB,IAAA,WAAA,GAAA;QAHQ,IAAA,CAAA,aAAa,GAAY,KAAK;AAC9B,QAAA,IAAA,CAAA,iBAAiB,GAAiC,IAAI,GAAG,EAAE;AAGjE,QAAA,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC;IAC1C;AAEA;;AAEG;IACI,GAAG,GAAA;AACR,QAAA,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvB,IAAI,CAAC,UAAU,EAAE;QACnB;;QAGA,IAAI,CAAC,uBAAuB,EAAE;IAChC;IAEQ,UAAU,GAAA;AAChB,QAAA,OAAO,CAAC,GAAG,CAAC,oDAAoD,CAAC;;;AAKjE,QAAA,IAAI,CAAC,aAAa,GAAG,IAAI;IAC3B;IAEQ,uBAAuB,GAAA;;;AAI7B,QAAA,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,KAAK,EAAE;YACjC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;;YAGjC,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE;AACzC,gBAAA,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;YAC1B;QACF;IACF;AAEA;;;AAGG;AACK,IAAA,aAAa,CAAC,IAAU,EAAA;;AAE9B,QAAA,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YAC1C,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE;AACpC,gBAAA,SAAS,EAAE,IAAI,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;AACzC,gBAAA,UAAU,EAAE,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;AACzC,gBAAA,WAAW,EAAE,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;AAC1C,gBAAA,SAAS,EAAE,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC;AACvC,gBAAA,WAAW,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI;AACvC,aAAA,CAAC;QACJ;AAEA,QAAA,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAE;;;QAI1D,MAAM,MAAM,GAAG,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC;;QAG9C,MAAM,KAAK,GAAG,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;;AAGhD,QAAA,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC;;AAGlC,QAAA,WAAW,CAAC,SAAS,CAAC,GAAG,EAAE;;AAG3B,QAAA,WAAW,CAAC,WAAW,CAAC,GAAG,EAAE;IAC/B;AACD;;ACxGD;AACA,MAAM,MAAM,GAAG,IAAI,MAAM,EAAE;AAE3B;AACO,MAAM,IAAI,GAAG,MAAW;AAC7B,IAAA,IAAI;;AAEF,QAAA,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,MAAM,EAAE;YAChC,IAAI,EAAE,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;AAC1B,gBAAA,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;YAC5B;QACF;;QAGA,MAAM,CAAC,GAAG,EAAE;IACd;IAAE,OAAO,KAAK,EAAE;AACd,QAAA,OAAO,CAAC,GAAG,CAAC,kCAAkC,KAAK,CAAA,CAAE,CAAC;AACtD,QAAA,IAAI,KAAK,YAAY,KAAK,EAAE;YAC1B,OAAO,CAAC,GAAG,CAAC,CAAA,OAAA,EAAU,KAAK,CAAC,KAAK,CAAA,CAAE,CAAC;QACtC;IACF;AACF;;;;"}