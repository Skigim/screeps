{"version":3,"file":"main.js","sources":["../src/main.ts"],"sourcesContent":["/**\r\n * PROJECT IMPERIUM - RCL1 FOUNDATION\r\n * \r\n * Philosophy: Simple, tested, expandable\r\n * Strategy: Build RCL1 → Prove it works → Add RCL2\r\n * \r\n * \"Festina lente\" - Make haste slowly\r\n */\r\n\r\n// We use the existing CreepMemory from interfaces/CreepRequest.ts\r\n// It already has: role, room, working fields\r\n\r\n/**\r\n * RCL1 ECONOMY - THE FOUNDATION\r\n * \r\n * Phase 1: 2 Harvesters (gather energy, fill spawn)\r\n * Phase 2: Upgraders (maintain controller, prevent downgrade)\r\n * Phase 3: Builders (only when construction sites exist)\r\n * \r\n * Energy Flow: Source → Harvester → Spawn → Upgrader → Controller\r\n */\r\n\r\nexport const loop = (): void => {\r\n  console.log(`⚔️ Tick ${Game.time} - PROJECT IMPERIUM - RCL1 FOUNDATION`);\r\n\r\n  // Clean up dead creep memory\r\n  for (const name in Memory.creeps) {\r\n    if (!(name in Game.creeps)) {\r\n      delete Memory.creeps[name];\r\n      console.log(`💀 Creep ${name} has fallen in battle`);\r\n    }\r\n  }\r\n\r\n  // Process each room we own\r\n  for (const roomName in Game.rooms) {\r\n    const room = Game.rooms[roomName];\r\n    if (!room.controller || !room.controller.my) continue;\r\n\r\n    runRoom(room);\r\n  }\r\n};\r\n\r\nfunction runRoom(room: Room): void {\r\n  const spawn = room.find(FIND_MY_SPAWNS)[0];\r\n  if (!spawn) return;\r\n\r\n  // Count creeps by role\r\n  const creeps = room.find(FIND_MY_CREEPS);\r\n  const harvesters = creeps.filter(c => c.memory.role === 'harvester');\r\n  const upgraders = creeps.filter(c => c.memory.role === 'upgrader');\r\n  const builders = creeps.filter(c => c.memory.role === 'builder');\r\n\r\n  console.log(`📊 ${room.name}: H=${harvesters.length}, U=${upgraders.length}, B=${builders.length}, RCL=${room.controller!.level}`);\r\n\r\n  // Spawn logic - Simple priority system\r\n  spawnCreeps(spawn, room, harvesters.length, upgraders.length, builders.length);\r\n\r\n  // Run creep behaviors\r\n  creeps.forEach(creep => {\r\n    switch (creep.memory.role) {\r\n      case 'harvester':\r\n        runHarvester(creep);\r\n        break;\r\n      case 'upgrader':\r\n        runUpgrader(creep);\r\n        break;\r\n      case 'builder':\r\n        runBuilder(creep);\r\n        break;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * SPAWN LOGIC - RCL1 Priority\r\n * \r\n * 1. Minimum 2 harvesters (critical - can't do anything without energy)\r\n * 2. Minimum 2 upgraders (prevent controller downgrade)\r\n * 3. Builders only if construction sites exist\r\n */\r\nfunction spawnCreeps(\r\n  spawn: StructureSpawn,\r\n  room: Room,\r\n  harvesterCount: number,\r\n  upgraderCount: number,\r\n  builderCount: number\r\n): void {\r\n  if (spawn.spawning) return;\r\n\r\n  const energy = room.energyAvailable;\r\n  const constructionSites = room.find(FIND_MY_CONSTRUCTION_SITES);\r\n\r\n  // Emergency: Always maintain minimum harvesters\r\n  if (harvesterCount < 2) {\r\n    const body = getBody(energy);\r\n    const result = spawn.spawnCreep(body, `harvester_${Game.time}`, {\r\n      memory: { role: 'harvester', room: room.name, working: false }\r\n    });\r\n    if (result === OK) {\r\n      console.log(`🌾 Spawning harvester with ${energy} energy`);\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Priority 2: Maintain upgraders\r\n  if (upgraderCount < 2) {\r\n    const body = getBody(energy);\r\n    const result = spawn.spawnCreep(body, `upgrader_${Game.time}`, {\r\n      memory: { role: 'upgrader', room: room.name, working: false }\r\n    });\r\n    if (result === OK) {\r\n      console.log(`⬆️ Spawning upgrader with ${energy} energy`);\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Priority 3: Spawn builder if construction sites exist\r\n  if (constructionSites.length > 0 && builderCount < 2) {\r\n    const body = getBody(energy);\r\n    const result = spawn.spawnCreep(body, `builder_${Game.time}`, {\r\n      memory: { role: 'builder', room: room.name, working: false }\r\n    });\r\n    if (result === OK) {\r\n      console.log(`🔨 Spawning builder with ${energy} energy`);\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Expansion: Add more upgraders if we have energy to spare\r\n  if (upgraderCount < 4 && energy >= 550) {\r\n    const body = getBody(energy);\r\n    const result = spawn.spawnCreep(body, `upgrader_${Game.time}`, {\r\n      memory: { role: 'upgrader', room: room.name, working: false }\r\n    });\r\n    if (result === OK) {\r\n      console.log(`⬆️ Spawning additional upgrader`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * BODY DESIGN - Simple and scalable\r\n * \r\n * Pattern: [WORK, CARRY, MOVE] repeating\r\n * Cost per unit: 200 energy\r\n * \r\n * RCL1 with 300 energy: [W, C, M] = 200 energy\r\n * RCL2 with 550 energy: [W, C, M, W, C, M] = 400 energy\r\n */\r\nfunction getBody(energy: number): BodyPartConstant[] {\r\n  const body: BodyPartConstant[] = [];\r\n  \r\n  // Start with basic unit\r\n  const unitCost = 200; // WORK (100) + CARRY (50) + MOVE (50)\r\n  let remainingEnergy = energy;\r\n\r\n  // Add [W, C, M] units until we run out of energy\r\n  while (remainingEnergy >= unitCost && body.length < 12) {\r\n    body.push(WORK, CARRY, MOVE);\r\n    remainingEnergy -= unitCost;\r\n  }\r\n\r\n  // Minimum viable creep if we can't afford a full unit\r\n  if (body.length === 0) {\r\n    body.push(WORK, CARRY, MOVE); // Force at least one unit\r\n  }\r\n\r\n  return body;\r\n}\r\n\r\n/**\r\n * HARVESTER - The backbone of the economy\r\n * \r\n * Behavior:\r\n * 1. Harvest energy from source\r\n * 2. Bring energy to spawn\r\n * 3. Repeat\r\n */\r\nfunction runHarvester(creep: Creep): void {\r\n  // State machine: Switch between harvesting and delivering\r\n  if (creep.store.getFreeCapacity() === 0) {\r\n    creep.memory.working = true;\r\n  }\r\n  if (creep.store.getUsedCapacity(RESOURCE_ENERGY) === 0) {\r\n    creep.memory.working = false;\r\n  }\r\n\r\n  if (!creep.memory.working) {\r\n    // Get energy from source\r\n    const source = creep.pos.findClosestByPath(FIND_SOURCES_ACTIVE);\r\n    if (source) {\r\n      if (creep.harvest(source) === ERR_NOT_IN_RANGE) {\r\n        creep.moveTo(source, { visualizePathStyle: { stroke: '#ffaa00' } });\r\n      }\r\n    }\r\n  } else {\r\n    // Deliver energy to spawn\r\n    const spawn = creep.room.find(FIND_MY_SPAWNS)[0];\r\n    if (spawn && spawn.store.getFreeCapacity(RESOURCE_ENERGY) > 0) {\r\n      if (creep.transfer(spawn, RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {\r\n        creep.moveTo(spawn, { visualizePathStyle: { stroke: '#ffffff' } });\r\n      }\r\n    } else {\r\n      // Spawn full, help with upgrading instead\r\n      const controller = creep.room.controller;\r\n      if (controller) {\r\n        if (creep.upgradeController(controller) === ERR_NOT_IN_RANGE) {\r\n          creep.moveTo(controller, { visualizePathStyle: { stroke: '#ffffff' } });\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * UPGRADER - Maintains controller progress\r\n * \r\n * Behavior:\r\n * 1. Withdraw energy from spawn\r\n * 2. Upgrade controller\r\n * 3. Repeat\r\n */\r\nfunction runUpgrader(creep: Creep): void {\r\n  // State machine\r\n  if (creep.store.getUsedCapacity(RESOURCE_ENERGY) === 0) {\r\n    creep.memory.working = false;\r\n  }\r\n  if (creep.store.getFreeCapacity() === 0) {\r\n    creep.memory.working = true;\r\n  }\r\n\r\n  if (!creep.memory.working) {\r\n    // Get energy from spawn\r\n    const spawn = creep.room.find(FIND_MY_SPAWNS)[0];\r\n    if (spawn && spawn.store.getUsedCapacity(RESOURCE_ENERGY) > 0) {\r\n      if (creep.withdraw(spawn, RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {\r\n        creep.moveTo(spawn, { visualizePathStyle: { stroke: '#ffaa00' } });\r\n      }\r\n    }\r\n  } else {\r\n    // Upgrade controller\r\n    const controller = creep.room.controller;\r\n    if (controller) {\r\n      if (creep.upgradeController(controller) === ERR_NOT_IN_RANGE) {\r\n        creep.moveTo(controller, { visualizePathStyle: { stroke: '#00ff00' } });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * BUILDER - Constructs structures\r\n * \r\n * Behavior:\r\n * 1. Withdraw energy from spawn\r\n * 2. Build construction sites\r\n * 3. Repeat\r\n */\r\nfunction runBuilder(creep: Creep): void {\r\n  // State machine\r\n  if (creep.store.getUsedCapacity(RESOURCE_ENERGY) === 0) {\r\n    creep.memory.working = false;\r\n  }\r\n  if (creep.store.getFreeCapacity() === 0) {\r\n    creep.memory.working = true;\r\n  }\r\n\r\n  if (!creep.memory.working) {\r\n    // Get energy from spawn\r\n    const spawn = creep.room.find(FIND_MY_SPAWNS)[0];\r\n    if (spawn && spawn.store.getUsedCapacity(RESOURCE_ENERGY) > 0) {\r\n      if (creep.withdraw(spawn, RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {\r\n        creep.moveTo(spawn, { visualizePathStyle: { stroke: '#ffaa00' } });\r\n      }\r\n    }\r\n  } else {\r\n    // Build construction sites\r\n    const site = creep.pos.findClosestByPath(FIND_MY_CONSTRUCTION_SITES);\r\n    if (site) {\r\n      if (creep.build(site) === ERR_NOT_IN_RANGE) {\r\n        creep.moveTo(site, { visualizePathStyle: { stroke: '#0000ff' } });\r\n      }\r\n    } else {\r\n      // No construction sites, help upgrade instead\r\n      const controller = creep.room.controller;\r\n      if (controller) {\r\n        if (creep.upgradeController(controller) === ERR_NOT_IN_RANGE) {\r\n          creep.moveTo(controller, { visualizePathStyle: { stroke: '#00ff00' } });\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}