/// <reference types="screeps" />

/**
 * The report generated by Legatus Archivus (The Archivist)
 * This is pure observational data - no decisions, just facts
 * 
 * The Archivist's job is to make the room state readable and actionable
 */
export interface ArchivistReport {
  // Room Identity
  roomName: string;
  rcl: number; // Room Control Level
  
  // Energy Economy
  energyAvailable: number;
  energyCapacityAvailable: number;
  energyDeficit: number; // How much energy we need
  
  // Sources
  sources: SourceReport[];
  
  // Structures
  spawns: SpawnReport[];
  extensions: number;
  towers: TowerReport[];
  containers: ContainerReport[];
  storageAvailable: boolean;
  storageEnergy: number;
  
  // Construction & Repair
  constructionSites: ConstructionSiteReport[];
  repairTargets: RepairTargetReport[];
  
  // Controller Status
  controller: ControllerReport;
  
  // Military Situation
  hostiles: HostileReport[];
  hostileThreatLevel: number; // 0 = safe, 1-10 = threat scale
  
  // Creep Census
  creepsByRole: Map<string, number>;
  totalCreeps: number;
  
  // Traffic Analysis (for Legatus Viae)
  highTrafficPositions: Array<{ x: number; y: number }>;
}

/** Report on a specific energy source */
export interface SourceReport {
  id: Id<Source>;
  pos: { x: number; y: number };
  energy: number;
  energyCapacity: number;
  harvestersPresent: number;
  harvestersNeeded: number;
}

/** Report on a spawn structure */
export interface SpawnReport {
  id: Id<StructureSpawn>;
  spawning: boolean;
  energy: number;
  energyCapacity: number;
}

/** Report on a tower structure */
export interface TowerReport {
  id: Id<StructureTower>;
  energy: number;
  energyCapacity: number;
  needsRefill: boolean;
}

/** Report on a container structure */
export interface ContainerReport {
  id: Id<StructureContainer>;
  pos: { x: number; y: number };
  store: { energy: number };
  storeCapacity: number;
}

/** Report on a construction site */
export interface ConstructionSiteReport {
  id: Id<ConstructionSite>;
  structureType: StructureConstant;
  progress: number;
  progressTotal: number;
  pos: { x: number; y: number };
  priority: number; // Architect-determined priority (higher = more important)
}

/** Report on a structure that needs repair */
export interface RepairTargetReport {
  id: Id<Structure>;
  structureType: StructureConstant;
  hits: number;
  hitsMax: number;
  priority: number; // Based on how critical the structure is
  pos: { x: number; y: number };
}

/** Report on the room controller */
export interface ControllerReport {
  id: Id<StructureController>;
  level: number;
  progress: number;
  progressTotal: number;
  ticksToDowngrade: number;
  upgraderCount: number;
  upgraderRecommendation: number; // How many upgraders we should have
}

/** Report on a hostile creep */
export interface HostileReport {
  id: Id<Creep>;
  pos: { x: number; y: number };
  owner: string;
  body: BodyPartConstant[];
  threatLevel: number; // Calculated based on body parts
}
