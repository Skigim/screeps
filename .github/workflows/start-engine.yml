name: Start Screeps Engine

on:
  workflow_dispatch:
    inputs:
      command:
        description: "Console expression to run (defaults to engine start stub)"
        required: false
        default: "global.Engine?.start?.() ?? console.log('[CI] engine start trigger (default)');"
      shard:
        description: "Shard to target (defaults to shard3)"
        required: false
        default: "shard3"

jobs:
  start:
    runs-on: ubuntu-latest
    steps:
      - name: Ensure token provided
        env:
          SCREEPS_TOKEN: ${{ secrets.SCREEPS_TOKEN }}
        run: |
          if [ -z "${SCREEPS_TOKEN}" ]; then
            echo "SCREEPS_TOKEN secret is required" >&2
            exit 1
          fi
      - name: Send console command
        env:
          SCREEPS_TOKEN: ${{ secrets.SCREEPS_TOKEN }}
          COMMAND: ${{ github.event.inputs.command }}
          SHARD: ${{ github.event.inputs.shard }}
          SCREEPS_HOST: ${{ secrets.SCREEPS_HOST }}
          SCREEPS_PORT: ${{ secrets.SCREEPS_PORT }}
        run: |
          node - <<'NODE'
          const https = require('https');

          const token = process.env.SCREEPS_TOKEN;
          const command = (process.env.COMMAND && process.env.COMMAND.trim().length > 0)
            ? process.env.COMMAND
            : "global.Engine?.start?.() ?? console.log('[CI] engine start trigger (default)');";
          const shard = process.env.SHARD && process.env.SHARD.trim().length > 0 ? process.env.SHARD : 'shard3';
          const hostname = process.env.SCREEPS_HOST && process.env.SCREEPS_HOST.trim().length > 0
            ? process.env.SCREEPS_HOST
            : 'screeps.com';
          const port = process.env.SCREEPS_PORT && Number(process.env.SCREEPS_PORT)
            ? Number(process.env.SCREEPS_PORT)
            : 443;

          const payload = JSON.stringify({ expression: command, shard });

          const options = {
            hostname,
            port,
            path: '/api/user/console',
            method: 'POST',
            headers: {
              'Content-Type': 'application/json; charset=utf-8',
              'Content-Length': Buffer.byteLength(payload),
              'X-Token': token,
              'X-Username': token
            }
          };

          console.log(`\n‚û°Ô∏è  Sending console command to ${hostname}:${port} (shard: ${shard})`);
          console.log(`üìù Command: ${command}`);

          const req = https.request(options, res => {
            let body = '';
            res.on('data', chunk => (body += chunk));
            res.on('end', () => {
              console.log(`\nHTTP ${res.statusCode}`);
              if (body) {
                try {
                  console.log('Response:', JSON.stringify(JSON.parse(body), null, 2));
                } catch (error) {
                  console.log('Response:', body);
                }
              }
              if (res.statusCode < 200 || res.statusCode >= 300) {
                process.exit(1);
              }
            });
          });

          req.on('error', error => {
            console.error('‚ùå Request failed:', error.message);
            process.exit(1);
          });

          req.write(payload);
          req.end();
          NODE
